package control;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.stage.Stage;
import javafx.scene.layout.HBox;

import java.net.URL;
import java.util.ResourceBundle;
import java.util.regex.Pattern;

public class Controller_HeThong_DoiMatKhau implements Initializable {

    // Labels - Info
    @FXML private Label lblTenTaiKhoan;
    @FXML private Label lblEmail;
    
    // Password Fields
    @FXML private PasswordField oldPasswordField;
    @FXML private TextField oldPasswordVisible;
    @FXML private PasswordField newPasswordField;
    @FXML private TextField newPasswordVisible;
    @FXML private PasswordField confirmPasswordField;
    @FXML private TextField confirmPasswordVisible;
    
    // Buttons
    @FXML private Button btnShowOld;
    @FXML private Button btnShowNew;
    @FXML private Button btnShowConfirm;
    
    // Labels - Feedback
    @FXML private Label lblPasswordStrength;
    @FXML private Label lblPasswordMatch;
    @FXML private Label lblMessage;
    
    private String currentUsername;
    private String currentEmail;

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        // Bind visible v√† invisible password fields
        setupPasswordFieldBinding();
        
        // Setup real-time validation
        setupRealTimeValidation();
    }
    
    /**
     * Set th√¥ng tin t√†i kho·∫£n t·ª´ controller kh√°c
     */
    public void setAccountInfo(String username, String email) {
        this.currentUsername = username;
        this.currentEmail = email;
        lblTenTaiKhoan.setText(username);
        lblEmail.setText(email);
    }
    
    /**
     * Bind password field v·ªõi text field ƒë·ªÉ show/hide
     */
    private void setupPasswordFieldBinding() {
        // Old password
        oldPasswordField.textProperty().bindBidirectional(oldPasswordVisible.textProperty());
        
        // New password
        newPasswordField.textProperty().bindBidirectional(newPasswordVisible.textProperty());
        
        // Confirm password
        confirmPasswordField.textProperty().bindBidirectional(confirmPasswordVisible.textProperty());
    }
    
    /**
     * Setup validation theo th·ªùi gian th·ª±c
     */
    private void setupRealTimeValidation() {
        // Ki·ªÉm tra ƒë·ªô m·∫°nh m·∫≠t kh·∫©u
        newPasswordField.textProperty().addListener((obs, oldVal, newVal) -> {
            checkPasswordStrength(newVal);
            checkPasswordMatch();
        });
        
        // Ki·ªÉm tra m·∫≠t kh·∫©u kh·ªõp
        confirmPasswordField.textProperty().addListener((obs, oldVal, newVal) -> {
            checkPasswordMatch();
        });
    }
    
    /**
     * Toggle hi·ªÉn th·ªã m·∫≠t kh·∫©u c≈©
     */
    @FXML
    private void toggleOldPasswordVisibility() {
        if (oldPasswordField.isVisible()) {
            oldPasswordField.setVisible(false);
            oldPasswordField.setManaged(false);
            oldPasswordVisible.setVisible(true);
            oldPasswordVisible.setManaged(true);
            btnShowOld.setText("üôà");
        } else {
            oldPasswordField.setVisible(true);
            oldPasswordField.setManaged(true);
            oldPasswordVisible.setVisible(false);
            oldPasswordVisible.setManaged(false);
            btnShowOld.setText("üëÅ");
        }
    }
    
    /**
     * Toggle hi·ªÉn th·ªã m·∫≠t kh·∫©u m·ªõi
     */
    @FXML
    private void toggleNewPasswordVisibility() {
        if (newPasswordField.isVisible()) {
            newPasswordField.setVisible(false);
            newPasswordField.setManaged(false);
            newPasswordVisible.setVisible(true);
            newPasswordVisible.setManaged(true);
            btnShowNew.setText("üôà");
        } else {
            newPasswordField.setVisible(true);
            newPasswordField.setManaged(true);
            newPasswordVisible.setVisible(false);
            newPasswordVisible.setManaged(false);
            btnShowNew.setText("üëÅ");
        }
    }
    
    /**
     * Toggle hi·ªÉn th·ªã x√°c nh·∫≠n m·∫≠t kh·∫©u
     */
    @FXML
    private void toggleConfirmPasswordVisibility() {
        if (confirmPasswordField.isVisible()) {
            confirmPasswordField.setVisible(false);
            confirmPasswordField.setManaged(false);
            confirmPasswordVisible.setVisible(true);
            confirmPasswordVisible.setManaged(true);
            btnShowConfirm.setText("üôà");
        } else {
            confirmPasswordField.setVisible(true);
            confirmPasswordField.setManaged(true);
            confirmPasswordVisible.setVisible(false);
            confirmPasswordVisible.setManaged(false);
            btnShowConfirm.setText("üëÅ");
        }
    }
    
    /**
     * Ki·ªÉm tra ƒë·ªô m·∫°nh m·∫≠t kh·∫©u
     */
    private void checkPasswordStrength(String password) {
        if (password == null || password.isEmpty()) {
            lblPasswordStrength.setText("");
            return;
        }
        
        int strength = 0;
        
        // Ki·ªÉm tra ƒë·ªô d√†i
        if (password.length() >= 6) strength++;
        if (password.length() >= 8) strength++;
        
        // Ki·ªÉm tra ch·ªØ hoa
        if (Pattern.compile("[A-Z]").matcher(password).find()) strength++;
        
        // Ki·ªÉm tra ch·ªØ th∆∞·ªùng
        if (Pattern.compile("[a-z]").matcher(password).find()) strength++;
        
        // Ki·ªÉm tra s·ªë
        if (Pattern.compile("[0-9]").matcher(password).find()) strength++;
        
        // Ki·ªÉm tra k√Ω t·ª± ƒë·∫∑c bi·ªát
        if (Pattern.compile("[!@#$%^&*(),.?\":{}|<>]").matcher(password).find()) strength++;
        
        // Hi·ªÉn th·ªã k·∫øt qu·∫£
        lblPasswordStrength.getStyleClass().clear();
        if (strength <= 2) {
            lblPasswordStrength.setText("ƒê·ªô m·∫°nh: Y·∫øu ‚ö†Ô∏è");
            lblPasswordStrength.getStyleClass().add("password-weak");
        } else if (strength <= 4) {
            lblPasswordStrength.setText("ƒê·ªô m·∫°nh: Trung b√¨nh üî∂");
            lblPasswordStrength.getStyleClass().add("password-medium");
        } else {
            lblPasswordStrength.setText("ƒê·ªô m·∫°nh: M·∫°nh ‚úì");
            lblPasswordStrength.getStyleClass().add("password-strong");
        }
    }
    
    /**
     * Ki·ªÉm tra m·∫≠t kh·∫©u kh·ªõp
     */
    private void checkPasswordMatch() {
        String newPass = newPasswordField.getText();
        String confirmPass = confirmPasswordField.getText();
        
        if (confirmPass.isEmpty()) {
            lblPasswordMatch.setText("");
            return;
        }
        
        lblPasswordMatch.getStyleClass().clear();
        if (newPass.equals(confirmPass)) {
            lblPasswordMatch.setText("‚úì M·∫≠t kh·∫©u kh·ªõp");
            lblPasswordMatch.getStyleClass().add("match-success");
        } else {
            lblPasswordMatch.setText("‚úó M·∫≠t kh·∫©u kh√¥ng kh·ªõp");
            lblPasswordMatch.getStyleClass().add("match-error");
        }
    }
    
    /**
     * Validate form tr∆∞·ªõc khi submit
     */
    private boolean validateForm() {
        String oldPass = oldPasswordField.getText().trim();
        String newPass = newPasswordField.getText().trim();
        String confirmPass = confirmPasswordField.getText().trim();
        
        // Ki·ªÉm tra r·ªóng
        if (oldPass.isEmpty()) {
            showMessage("Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i!", false);
            return false;
        }
        
        if (newPass.isEmpty()) {
            showMessage("Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi!", false);
            return false;
        }
        
        if (confirmPass.isEmpty()) {
            showMessage("Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi!", false);
            return false;
        }
        
        // Ki·ªÉm tra ƒë·ªô d√†i t·ªëi thi·ªÉu
        if (newPass.length() < 6) {
            showMessage("M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!", false);
            return false;
        }
        
        // Ki·ªÉm tra m·∫≠t kh·∫©u kh·ªõp
        if (!newPass.equals(confirmPass)) {
            showMessage("M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n kh√¥ng kh·ªõp!", false);
            return false;
        }
        
        // Ki·ªÉm tra m·∫≠t kh·∫©u m·ªõi kh√°c m·∫≠t kh·∫©u c≈©
        if (oldPass.equals(newPass)) {
            showMessage("M·∫≠t kh·∫©u m·ªõi ph·∫£i kh√°c m·∫≠t kh·∫©u hi·ªán t·∫°i!", false);
            return false;
        }
        
        return true;
    }
    
    /**
     * X·ª≠ l√Ω ƒë·ªïi m·∫≠t kh·∫©u
     */
    @FXML
    private void handleChangePassword() {
        if (!validateForm()) {
            return;
        }
        
        String oldPass = oldPasswordField.getText().trim();
        String newPass = newPasswordField.getText().trim();
        
        try {
            // TODO: G·ªçi DAO ƒë·ªÉ ki·ªÉm tra m·∫≠t kh·∫©u c≈© v√† c·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
            // TaiKhoanDAO dao = new TaiKhoanDAO();
            // boolean isOldPasswordCorrect = dao.checkPassword(currentUsername, oldPass);
            
            // SIMULATION: Gi·∫£ l·∫≠p ki·ªÉm tra m·∫≠t kh·∫©u c≈©
            boolean isOldPasswordCorrect = true; // Thay b·∫±ng dao.checkPassword()
            
            if (!isOldPasswordCorrect) {
                showMessage("M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng!", false);
                return;
            }
            
            // TODO: C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
            // dao.updatePassword(currentUsername, newPass);
            
            System.out.println("=== ƒê·ªîI M·∫¨T KH·∫®U TH√ÄNH C√îNG ===");
            System.out.println("T√†i kho·∫£n: " + currentUsername);
            System.out.println("M·∫≠t kh·∫©u m·ªõi: " + newPass);
            
            showMessage("ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng! ‚úì", true);
            
            // Clear form sau 2 gi√¢y
            new Thread(() -> {
                try {
                    Thread.sleep(2000);
                    javafx.application.Platform.runLater(this::handleCancel);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }).start();
            
        } catch (Exception e) {
            showMessage("L·ªói: " + e.getMessage(), false);
            e.printStackTrace();
        }
    }
    
    /**
     * Hi·ªÉn th·ªã th√¥ng b√°o
     */
    private void showMessage(String message, boolean isSuccess) {
        lblMessage.setText(message);
        lblMessage.getStyleClass().clear();
        lblMessage.getStyleClass().add("message-label");
        
        if (isSuccess) {
            lblMessage.getStyleClass().add("message-success");
        } else {
            lblMessage.getStyleClass().add("message-error");
        }
        
        lblMessage.setVisible(true);
        lblMessage.setManaged(true);
    }
    
    /**
     * H·ªßy v√† ƒë√≥ng c·ª≠a s·ªï
     */
    @FXML
    private void handleCancel() {
        Stage stage = (Stage) lblTenTaiKhoan.getScene().getWindow();
        stage.close();
    }
}